/*
Checks if a give username/passowrd combination is valid
INPUTS: identityToken - username or email
	password - password of user
OUTPUTS: returns 1 if username/password is valid
	 returns 0 if username/password is not valid
*/
function checkLogin (identityToken, password) {
	
	var xmlHttp = null;

	var query_string = 'query_type=0'
				+ '&identityToken=' + identityToken
				+ '&password=' + password;

	xmlHttp = new XMLHttpRequest();
	xmlHttp.open("GET", "database.php?" + query_string, false);
	xmlHttp.send(null);
	return xmlHttp.responseText;
	
}

/*
Returns a list of matching recipes according to search terms.
If you want to ignore a field while search, please assign it to empty string.
Eg: recipeUrl = '' means that you don't care about recipeUrl field when searching
INPUTS: recipeId
	recipeName
	steps
	recipeUrl
	userEmail
OUTPUTS: returns a list of recipes that match the search. Each recipe is 
	 delimited by a '<br>' and each field in the recipe is delimited 
	 by a ';;;'
*/
function searchRecipe (recipeId, recipeName, steps, userEmail) {

	var xmlHttp = null;

	var query_string = 'query_type=1'
				+ '&recipeId=' + recipeId
				+ '&recipeName=' + recipeName
				+ '&steps=' + encodeURIComponent(steps)
				+ '&userEmail=' + userEmail;
		

	xmlHttp = new XMLHttpRequest();
	xmlHttp.open("GET", "database.php?" + query_string, false);
	xmlHttp.send(null);
	return xmlHttp.responseText;
}

/*
Inserts a new recipe into the table. None of the recipe attributes can be empty.
A recipeId is automatiicaly generated by the database for each new recipe
INPUTS: recipeName
	steps
	recipeUrl
	userEmail
OUTPUTS: returns a 1 if insert is successful
	 returns a 0 if insert is NOT successful
*/
function insertRecipe (recipeName, steps, userEmail) {

	if (recipeName === '' || steps === '' || userEmail === '') {
		return 0;
	}
	
	var xmlHttp = null;

	var query_string = 'query_type=2'
				+ '&recipeName=' + recipeName
				+ '&steps=' + encodeURIComponent(steps)
				+ '&userEmail=' + userEmail;

	xmlHttp = new XMLHttpRequest();
	xmlHttp.open("GET", "database.php?" + query_string, false);
	xmlHttp.send(null);
	return xmlHttp.responseText;
	
}

/*

 */
function insertIngredient (recipeId, ingredientName, amount) {

    if (recipeId === '' || ingredientName === '' || amount === '') {
        return 0;
    }

    var xmlHttp = null;

    var query_string = 'query_type=6'
        + '&recipeId=' + recipeId
        + '&ingredientName=' + ingredientName
        + '&amount=' + amount;

    xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "database.php?" + query_string, false);
    xmlHttp.send(null);
    return xmlHttp.responseText;

}

/*
Deletes a recipe from the table
INPUTS: recipeId
OUTPUTS: returns a 1 if delete is successful
	 returns a 0 if delete is NOT successful
*/
function deleteRecipe (recipeId) {

	if (recipeId.indexOf("%") > -1 || recipeId.indexOf("-") > -1) {
		return 0;
	}

	var xmlHttp = null;

	var query_string = 'query_type=3'
				+ '&recipeId=' + recipeId;

	xmlHttp = new XMLHttpRequest();
	xmlHttp.open("GET", "database.php?" + query_string, false);
	xmlHttp.send(null);
	return xmlHttp.responseText;
}

/*
Updates a recipe in the table. recipeId is the id of the recipe to be updated. 
newXXX are new values for each of the recipe attributes
INPUTS: recipeId
	newRecipeName
	newSteps
	newRecipeUrl
	newUserEmail
OUTPUTS: returns a 1 if insert is successful
	 returns a 0 if insert is NOT successful
*/
function updateRecipe (recipeId, newRecipeName, newSteps, newUserEmail) {

	if (recipeId === '' || newRecipeName === '' || newSteps === '' || newUserEmail === '') {
		return 0;	
	}
	
	var xmlHttp = null;

	var query_string = 'query_type=4'
				+ '&recipeId=' + recipeId
				+ '&newRecipeName=' + newRecipeName
				+ '&newSteps=' + encodeURIComponent(newSteps)
				+ '&newUserEmail=' + newUserEmail;

	xmlHttp = new XMLHttpRequest();
	xmlHttp.open("GET", "database.php?" + query_string, false);
	xmlHttp.send(null);
	return xmlHttp.responseText;
}

/*
 Registers a new user into the database
 newXXX are new values for each of the recipe attributes
 INPUTS: username, password, email
 OUTPUTS: returns a true else alerts an error message and returns false;
*/
function registerUser(username, email, password, confirm) {
    if (username === '' || email === '' || password === '') {
        alert("You left a field blank");
        return 0;
    }
    // TODO(rfarias2): more password restraints
    if (password.length < 8) {
        alert("Password needs to be more than 8 characters long.");
        return;
    }
    if (password !== confirm) {
        alert("Password and Confirm Password do not match.");
        return;
    }
    var xmlHttp = null;

    var query_string = 'query_type=5'
        + '&username=' + username
        + '&userEmail=' + email
        + '&password=' + password;

    xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "database.php?" + query_string, false);
    xmlHttp.send(null);
    if (xmlHttp.responseText === '1') {
        return true;
    }
    else {
        alert(xmlHttp.responseText);
    }
    return false;
}

function getRecipeIngredients(recipeId) {
    var xmlHttp = null;

    var query_string = 'query_type=7'
        + '&recipeId=' + recipeId;

    xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "database.php?" + query_string, false);
    xmlHttp.send(null);
    return xmlHttp.responseText;
}

function updateIngredient(recipeId, ingredientName, ingredientAmount) {
    if (recipeId === '' || ingredientName === '' || ingredientAmount === '') {
        return 0;
    }

    var xmlHttp = null;

    var query_string = 'query_type=8'
        + '&recipeId=' + recipeId
        + '&ingredientName=' + ingredientName
        + '&amount=' + ingredientAmount;

    xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "database.php?" + query_string, false);
    xmlHttp.send(null);
    return xmlHttp.responseText;
}

function favoriteRecipe(recipeId, userEmail) {
    var xmlHttp = null;

    var query_string = 'query_type=10'
        + '&recipeId=' + recipeId
        + '&userEmail=' + userEmail;

    xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "database.php?" + query_string, false);
    xmlHttp.send(null);

    return xmlHttp.responseText;
}

function unfavoriteRecipe(recipeId, userEmail) {
    var xmlHttp = null;

    var query_string = 'query_type=11'
        + '&recipeId=' + recipeId
        + '&userEmail=' + userEmail;

    xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "database.php?" + query_string, false);
    xmlHttp.send(null);

    return xmlHttp.responseText;
}

function rateRecipe(recipeID, userEmail, rating) {
    var xmlHttp = null;

    var query_string = 'query_type=12'
        + '&recipeId=' + recipeID
        + '&userEmail=' + userEmail
        + '&rating=' + rating;

    xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "database.php?" + query_string, false);
    xmlHttp.send(null);

    return xmlHttp.responseText;
}




/*console.log("Checking correct login:" + checkLogin('devasia', 'password'));
console.log("Checking incorrect login:" + checkLogin('devasia', 'wrong'));

console.log("Checking search:" + searchRecipe('', '', '', '', ''));
console.log("Checking search for 'Beef':" + searchRecipe('', 'Beef', '', '', ''));

console.log("Inserting recipe: " + insertRecipe('newInsertTestRecipe', 'some random steps', 'rand', 'random email'));
console.log("Inserting recipe: " + insertRecipe('newInsertTestRecipe2', 'some random steps2', 'rand2', 'random email2'));

console.log("Deleting recipe: " + deleteRecipe('408'));
console.log("Deleting recipe: " + deleteRecipe('409'));

console.log("Updating recipe: " + updateRecipe('410', 'new random recipe name', 'new steps', 'new recipe url', 'new user email'));*/