/*
Checks if a give username/passowrd combination is valid
INPUTS: username - username of user
	password - password of user
OUTPUTS: returns 1 if username/password is valid
	 returns 0 if username/password is not valid
*/
function checkLogin (username, password) {
	
	var xmlHttp = null;

	var query_string = 'query_type=0'
				+ '&username=' + username
				+ '&password=' + password;

	xmlHttp = new XMLHttpRequest();
	xmlHttp.open("GET", "database.php?" + query_string, false);
	xmlHttp.send(null);
	return xmlHttp.responseText;
	
}

/*
Returns a list of matching recipes according to search terms.
If you want to ignore a field while search, please assign it to empty string.
Eg: recipeUrl = '' means that you don't care about recipeUrl field when searching
INPUTS: recipeId
	recipeName
	steps
	recipeUrl
	userEmail
OUTPUTS: returns a list of recipes that match the search. Each recipe is 
	 delimited by a '<br>' and each field in the recipe is delimited 
	 by a ';;;'
*/
function searchRecipe (recipeId, recipeName, steps, recipeUrl, userEmail) {

	var xmlHttp = null;

	var query_string = 'query_type=1'
				+ '&recipeId=' + recipeId
				+ '&recipeName=' + recipeName
				+ '&steps=' + steps
				+ '&recipeUrl=' + recipeUrl
				+ '&userEmail=' + userEmail;
		

	xmlHttp = new XMLHttpRequest();
	xmlHttp.open("GET", "database.php?" + query_string, false);
	xmlHttp.send(null);
	return xmlHttp.responseText;
}

/*
Inserts a new recipe into the table. None of the recipe attributes can be empty.
A recipeId is automatiicaly generated by the database for each new recipe
INPUTS: recipeName
	steps
	recipeUrl
	userEmail
OUTPUTS: returns a 1 if insert is successful
	 returns a 0 if insert is NOT successful
*/
function insertRecipe (recipeName, steps, recipeUrl, userEmail) {
	
	if (recipeName === '' || steps === '' || recipeUrl === '' || userEmail === '') {
		return 0;
	}
	
	var xmlHttp = null;

	var query_string = 'query_type=2'
				+ '&recipeName=' + recipeName
				+ '&steps=' + steps
				+ '&recipeUrl=' + recipeUrl
				+ '&userEmail=' + userEmail;

	xmlHttp = new XMLHttpRequest();
	xmlHttp.open("GET", "database.php?" + query_string, false);
	xmlHttp.send(null);
	return xmlHttp.responseText;
	
}

/*
Deletes a recipe from the table
INPUTS: recipeId
OUTPUTS: returns a 1 if delete is successful
	 returns a 0 if delete is NOT successful
*/
function deleteRecipe (recipeId) {

	if (recipeId.indexOf("%") > -1 || recipeId.indexOf("-") > -1) {
		return 0;
	}
	
	var xmlHttp = null;

	var query_string = 'query_type=3'
				+ '&recipeId=' + recipeId;

	xmlHttp = new XMLHttpRequest();
	xmlHttp.open("GET", "database.php?" + query_string, false);
	xmlHttp.send(null);
	return xmlHttp.responseText;
}

/*
Updates a recipe in the table. recipeId is the id of the recipe to be updated. 
newXXX are new values for each of the recipe attributes
INPUTS: recipeId
	newRecipeName
	newSteps
	newRecipeUrl
	newUserEmail
OUTPUTS: returns a 1 if insert is successful
	 returns a 0 if insert is NOT successful
*/
function updateRecipe (recipeId, newRecipeName, newSteps, newRecipeUrl, newUserEmail) {

	if (recipeId === '' || newRecipeName === '' || newSteps === '' || newRecipeUrl === '' || newUserEmail === '') {
		return 0;	
	}
	
	var xmlHttp = null;

	var query_string = 'query_type=4'
				+ '&recipeId=' + recipeId
				+ '&newRecipeName=' + newRecipeName
				+ '&newSteps=' + newSteps
				+ '&newRecipeUrl=' + newRecipeUrl
				+ '&newUserEmail=' + newUserEmail;

	xmlHttp = new XMLHttpRequest();
	xmlHttp.open("GET", "database.php?" + query_string, false);
	xmlHttp.send(null);
	return xmlHttp.responseText;
}

/*console.log("Checking correct login:" + checkLogin('devasia', 'password'));
console.log("Checking incorrect login:" + checkLogin('devasia', 'wrong'));

console.log("Checking search:" + searchRecipe('', '', '', '', ''));
console.log("Checking search for 'Beef':" + searchRecipe('', 'Beef', '', '', ''));

console.log("Inserting recipe: " + insertRecipe('newInsertTestRecipe', 'some random steps', 'rand', 'random email'));
console.log("Inserting recipe: " + insertRecipe('newInsertTestRecipe2', 'some random steps2', 'rand2', 'random email2'));

console.log("Deleting recipe: " + deleteRecipe('408'));
console.log("Deleting recipe: " + deleteRecipe('409'));

console.log("Updating recipe: " + updateRecipe('410', 'new random recipe name', 'new steps', 'new recipe url', 'new user email'));*/